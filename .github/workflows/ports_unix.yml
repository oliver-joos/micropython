name: unix port

on:
  push:
  pull_request:
    paths:
      - '.github/workflows/*.yml'
      - 'tools/**'
      - 'py/**'
      - 'extmod/**'
      - 'shared/**'
      - 'lib/**'
      - 'examples/**'
      - 'mpy-cross/**'
      - 'ports/unix/**'
      - 'tests/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  minimal:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: source tools/ci.sh && ci_unix_minimal_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_minimal_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  reproducible:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build with reproducible date
      run: source tools/ci.sh && ci_unix_minimal_build
      env:
        SOURCE_DATE_EPOCH: 1234567890
    - name: Check reproducible build date
      run: echo | ports/unix/build-minimal/micropython -i | grep 'on 2009-02-13;'

  standard:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: source tools/ci.sh && ci_unix_standard_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_standard_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  standard_v2:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: source tools/ci.sh && ci_unix_standard_v2_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_standard_v2_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      # Python 3.12 is the default for ubuntu-24.04, but that has compatibility issues with settrace tests.
      # Can remove this step when ubuntu-latest uses a more recent Python 3.x as the default.
      with:
        python-version: '3.11'
    - name: Install packages
      run: source tools/ci.sh && ci_unix_coverage_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_coverage_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_coverage_run_tests
    - name: Test merging .mpy files
      run: source tools/ci.sh && ci_unix_coverage_run_mpy_merge_tests
    - name: Build native mpy modules
      run: source tools/ci.sh && ci_native_mpy_modules_build
    - name: Test importing .mpy generated by mpy_ld.py
      run: source tools/ci.sh && ci_unix_coverage_run_native_mpy_tests
    - name: Run gcov coverage analysis
      run: |
        (cd ports/unix && gcov -o build-coverage/py ../../py/*.c || true)
        (cd ports/unix && gcov -o build-coverage/extmod ../../extmod/*.c || true)
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        fail_ci_if_error: true
        verbose: true
        token: ${{ secrets.CODECOV_TOKEN }}
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  coverage_32bit:
    runs-on: ubuntu-22.04 # use 22.04 to get libffi-dev:i386
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_32bit_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_coverage_32bit_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_coverage_32bit_run_tests
    - name: Build native mpy modules
      run: source tools/ci.sh && ci_native_mpy_modules_32bit_build
    - name: Test importing .mpy generated by mpy_ld.py
      run: source tools/ci.sh && ci_unix_coverage_32bit_run_native_mpy_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  nanbox:
    runs-on: ubuntu-22.04 # use 22.04 to get python2, and libffi-dev:i386
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_32bit_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_nanbox_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_nanbox_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  float:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Build
      run: source tools/ci.sh && ci_unix_float_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_float_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  stackless_clang:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_clang_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_stackless_clang_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_stackless_clang_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  float_clang:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_clang_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_float_clang_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_float_clang_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  settrace_stackless:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      # Python 3.12 is the default for ubuntu-24.04, but that has compatibility issues with settrace tests.
      # Can remove this step when ubuntu-latest uses a more recent Python 3.x as the default.
      with:
        python-version: '3.11'
    - name: Build
      run: source tools/ci.sh && ci_unix_settrace_stackless_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_settrace_stackless_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  macos:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: '3.8'
    - name: Build
      run: source tools/ci.sh && ci_unix_macos_build
    - name: Run tests
      run: source tools/ci.sh && ci_unix_macos_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  qemu_mips:
    # ubuntu-22.04 is needed for older libffi.
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_qemu_mips_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_qemu_mips_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_qemu_mips_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  qemu_arm:
    # ubuntu-22.04 is needed for older libffi.
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_qemu_arm_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_qemu_arm_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_qemu_arm_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  qemu_riscv64:
    # ubuntu-22.04 is needed for older libffi.
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4
    - name: Install packages
      run: source tools/ci.sh && ci_unix_qemu_riscv64_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_qemu_riscv64_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_qemu_riscv64_run_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  sanitize_address:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      # Python 3.12 is the default for ubuntu-24.04, but that has compatibility issues with settrace tests.
      # Can remove this step when ubuntu-latest uses a more recent Python 3.x as the default.
      with:
        python-version: '3.11'
    - name: Install packages
      run: source tools/ci.sh && ci_unix_coverage_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_sanitize_address_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_sanitize_address_run_tests
    - name: Test merging .mpy files
      run: source tools/ci.sh && ci_unix_coverage_run_mpy_merge_tests
    - name: Build native mpy modules
      run: source tools/ci.sh && ci_native_mpy_modules_build
    - name: Test importing .mpy generated by mpy_ld.py
      run: source tools/ci.sh && ci_unix_coverage_run_native_mpy_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  sanitize_undefined:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      # Python 3.12 is the default for ubuntu-24.04, but that has compatibility issues with settrace tests.
      # Can remove this step when ubuntu-latest uses a more recent Python 3.x as the default.
      with:
        python-version: '3.11'
    - name: Install packages
      run: source tools/ci.sh && ci_unix_coverage_setup
    - name: Build
      run: source tools/ci.sh && ci_unix_sanitize_undefined_build
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_sanitize_undefined_run_tests
    - name: Test merging .mpy files
      run: source tools/ci.sh && ci_unix_coverage_run_mpy_merge_tests
    - name: Build native mpy modules
      run: source tools/ci.sh && ci_native_mpy_modules_build
    - name: Test importing .mpy generated by mpy_ld.py
      run: source tools/ci.sh && ci_unix_coverage_run_native_mpy_tests
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures

  standard-lvgl:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    - uses: actions/checkout@v4

    - name: User module setup (lv_binding_micropython)
      run: mkdir user_modules && git clone https://github.com/Carglglz/lv_binding_micropython.git user_modules/lv_binding_micropython 
    - name: User module init 
      working-directory: ./user_modules/lv_binding_micropython
      run: git checkout dev && git submodule update --init --recursive

    - name: Install LVGL Dependencies
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe restricted multiverse"
        sudo apt-get update -y -qq
        sudo apt-get install libsdl2-dev parallel libfreetype-dev librlottie-dev libavformat-dev libavcodec-dev libswscale-dev libavutil-dev
        python3 -m pip install pillow

    - name: Build setup
      run: source tools/ci.sh 

    - name: Build mpy-cross
      run: make -j $(nproc) -C mpy-cross

    - name: Update submodules
      run: make -C ports/unix DEBUG=1 submodules

    - name: Install MicroPython dependencies
      run: make -j $(nproc) -C ports/unix DEBUG=1 deplibs

    - name: Build
      run: make -j $(nproc) -C ports/unix VARIANT=lvgl USER_C_MODULES=../../user_modules
    - name: Run main test suite
      run: source tools/ci.sh && ci_unix_run_tests_full_helper lvgl
    - name: Print failures
      if: failure()
      run: tests/run-tests.py --print-failures


    - name: Run MicroPython-LVGL API Tests
      run: MICROPY_MICROPYTHON=./ports/unix/build-lvgl/micropython ./tests/run-tests.py -d user_modules/lv_binding_micropython/tests/api

    - name: Print failures (MicroPython-LVGL)
      if: failure()
      run: MICROPY_MICROPYTHON=./ports/unix/build-lvgl/micropython ./tests/run-tests.py -d user_modules/lv_binding_micropython/tests/api --print-failures
      
    - name: Process Tests Artifacts
      working-directory: ./user_modules/lv_binding_micropython/tests
      run: ./imageconvert.py api/*.bin
    
    - name: Upload Test Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: API Tests Screenshots
        path: ./user_modules/lv_binding_micropython/tests/api/*.png
